/////////////////////////////////////////////////////////////////
//bibliotecas wifi
#include <WiFi.h>

//biblioteca do sensor de corrente
#include "EmonLib.h" //sensor de corrent sct013

////////////////////////////////////////////////////////////////
//bibliotecas emolib e suas variaveis SENDOR SCT013

EnergyMonitor SCT013;
int pinSCT = 34;   //Pino analógico conectado ao SCT-013 

float potencia;


/////////////////////////////////////////////////////////////////
//chamada da funcao media
int mediaTensao();


/////////////////////////////////////////////////////////////////
//client wifi


WiFiClient client;//isso esta sendo usado no servidor php tambem



/////////////////////////////////////////////////////////////////
//variaveis para conexao wifi


const char* ssid     = "";
const char* password = "";


/////////////////////////////////////////////////////////////////
//variaveis para servidor web e banco de dados
const char* host = "192.168.0.32";
int var_id=1;//id do medidor central do servidor

float consumo_fornecimento ;//mede consumo o kwh
float consumo_kwh;

int contador ;//variavel para contar o tempo

/////////////////////////////////////////////////////////////////
//para filtrar os dados recebidos do banco de dados
//programa mexico

int aux = 0;
String mexico;

String estado_consumo;


String link_enviar;
String link_serv;


int i = 0;
int j = 0;

/////////////////////////////////////////////////////////////////
// enviar chart para thingspeak
const char * hostDomain_ts = "api.thingspeak.com";
const int hostPort = 80; 
String myWriteAPIKey = "AS3HOODIBMOYZWPX";//chave pre_pago


/////////////////////////////////////////////////////////////////
//TIMER para contagem do tempo em segundos assim com marcadores
//podemos fazer im IF com o tempo desejado
volatile int interruptCounter;
int totalInterruptCounter;
 
hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;
 
void IRAM_ATTR onTimer() {
  portENTER_CRITICAL_ISR(&timerMux);
  interruptCounter++;
  portEXIT_CRITICAL_ISR(&timerMux);}




int conta5;//variavel de tempo para enviar sql
int conta16;//variavel de tempo para thinkspeack
int conta3; //variavel de tempo para religacao apos credito inserido
int aciona_conta3;//na mudanca ele ele aciona conta 3  

////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////
//variaveis de entrada e saida GPIO
int f1_d2 = 2;//GPIO d2 de saida

/////////////////////////////////////////////////////////////////
///////// inicio DO SETUP ///////////////////////////////////////
/////////////////////////////////////////////////////////////////
void setup() {
/////////////////////////////////////////////////////////////////
//GPIO de entrada


//GPIO de saida 
 pinMode(f1_d2, OUTPUT);

/////////////////////////////////////////////////////////////////
//iniciando conexao serial
  Serial.begin(115200);
  delay(10);


SCT013.current(pinSCT,6.0606 );
//foi "ajustado de 6.0606 para
/////////////////////////////////////////////////////////////////
  //timer para contagem do tempo em segundos assim podemos 
 
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &onTimer, true);
    timerAlarmWrite(timer, 1000000, true);
    timerAlarmEnable(timer);
    //FIM DO TIMER
/////////////////////////////////////////////////////////////////
// CONECTANDO COM A INTERNET

  Serial.println();
  Serial.println();
  Serial.print("CONECTANTO COM ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.println("endereco IP: ");
  Serial.println(WiFi.localIP());

/////////////////////////////////////////////////////////////////
//valores inicias para as variaveis

consumo_fornecimento = 0 ;
contador = 0;

conta5=0;
conta16=0;
aciona_conta3=0;
conta3=0;


/////////////////////////////////////////////////////////////////
//valores inicias para as entradas e saidas GPIO
digitalWrite(f1_d2, LOW);  
}
/////////////////////////////////////////////////////////////////
///////// FIM DO SETUP //////////////////////////////////////////
/////////////////////////////////////////////////////////////////
void loop() {
 
/////////////////////////////////////////////////////////////////
//////////CONTADOR DE TEMPO//////////////////////////////////////
   if (interruptCounter > 0) {
 
    portENTER_CRITICAL(&timerMux);
    interruptCounter--;
    portEXIT_CRITICAL(&timerMux);
 
    totalInterruptCounter++;//conta o total de interrupcoes (1 segundo)
 conta5++; //conta ate 5 e e zerado na parte que enviar apra o servidor mysql
 conta16++;//conta ate 16 e eu zero na parte thinkspeack
 contador++; //conta um segundo que e zerado quano incrementado o valor de consumo


 
  }
  /////////////////////////////////////////////////////////
  //reiniciar os comandos recebidos pelo servidor
      
      mexico="";
        estado_consumo = ""; 
      link_serv="";
     
 /////////////////////////////////////////////////////////////////
//programacao para sct-013//////////////////////////////////////
//float analog_value = analogRead(pinSCT);



if ( ( contador > 0 )  ){
 
  potencia=0;
  
  contador=0;

 int  tensao=59.1949*(mediaTensao()*0.0007326);//K*bits*Resolução, sendo: K = Saida/Entrada; bits= leitura Analogica entregue; Resolução = TensãoDeReferêcia/2^(n)-1
 Serial.print("tensao=");
 Serial.println(tensao);
  
float Irms = SCT013.calcIrms(1480);   // Calcula o valor da Corrente
 potencia = Irms * tensao;          // Calcula o valor da Potencia Instantanea
 
 if ( (totalInterruptCounter < 31)  ){potencia=0;consumo_fornecimento=0;} 

else { consumo_fornecimento +=  (potencia/60.0) ;  }

 Serial.print("corrente=");
 Serial.println(Irms);
 Serial.print("potencia=");
 Serial.println(potencia);
 
 
}
 ///////////////////////////////////////////////////////////
 //conectanto ao servidor
  if(conta5 > 10){
  conta5=0;

///////////////////////////////////////////////////////////////////


  String link_enviar = "";//zera link enviar
        
link_enviar += totalInterruptCounter;
link_enviar += ",";
link_enviar += consumo_fornecimento;


///////////////////////////////////////////////////////////////////////////


  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println("falha na conexao");
    return;
  }  
   

/////////////////////////////////////////////////////////////////////////
  // criando a URL para enviar e receber do servidor
  String url = "/tccfatecsa/ext/fornecimento/salvar.php?";
     url += "var_id=";
   
     url += var_id;
     url += "&consumo_fornecimento=";
     url += consumo_fornecimento;
       url += "&link_enviar=";
     url += link_enviar;
    
 

 
  client.print(String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" +
               "Connection: close\r\n\r\n");
         
           
               
  unsigned long timeout = millis();
  while (client.available() == 0) {
    if (millis() - timeout > 5000) {
      Serial.println(">>> tempo esgotado!");
      client.stop();
      return;
    }
  }

  
  while (client.available()) {
    String line = client.readStringUntil('\r');
 //Serial.print(line); //imprime toda a resposta do servidor*/
mexico += line;
  }
  
///////////////////////////////////////////////////////////////////
//prog do mexico para filtrar

while(aux == 0)
{
do
    {
      i++;
    }
while(mexico[i] != 'x');
j = i+1;
if(mexico[j] == 'x')
    {
      aux += 1;
    }
}

{
  j++;
do
    { estado_consumo +=mexico[j];
      //Serial.print(mexico[j]);
      j++;
    }
while(mexico[j] != 'x');
//Serial.println();
}
i = 0;
j=0;
aux = 0;
//-------------------------------------------------
//parte 2
while(aux == 0)
{
do
    {
      i++;
    }
while(mexico[i] != 'y' );
j = i+1;
if(mexico[j] == 'y')
    {
      aux += 1;
    }
}
{j++;
do
    {   link_serv +=mexico[j];
     // Serial.print(mexico[j]);
      j++;
    }
while(mexico[j] != 'y');
//Serial.println();
}
i = 0;
j=0;
aux = 0;
  
   

    //fim do prog do mexico para filtrar
//////////////////////////////////////////////////////////////////////////////////
//logica 2 a ser aplicada apos receber do servidor

   if (estado_consumo != "desvio"){ digitalWrite (f1_d2,LOW);   }
   else{digitalWrite(f1_d2, HIGH);}

/////////////////////////////////////////////////////////////////////////////////

if (link_serv==link_enviar){ consumo_fornecimento=0;

}

/////////////////////////////////////////////////////////////////////////////////
//fim do conta 5 e enviar para o servidor
  }
//////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////
//chama a funcao enviar TS

if ( (conta16>15 && consumo_fornecimento !=0) || (conta16 > 60) ){requestURL(hostDomain_ts, hostPort, consumo_fornecimento); conta16=0; }



///////////////////////////////////////////////////////////////////////////////////
    }//FIM DO LOOP
///////////////////////////////////////////////////////////////////////////////////


//******************//************************//*******************//**************//
//                          AKI COMECA AS FUNCOES                                 //
//******************//************************//*******************//**************//



//////////////////////////////////////////////////////////////////////////////////
//FUNCAO 1 -  para enviar dados para chart TS

void requestURL(const char * host_ts, uint8_t port_ts, float consumo_fornecimento)
 
{  //Serial.println("Connecting to domain: " + String(host)); 
  if (!client.connect(host_ts, port_ts))
  {   Serial.println("connection failed");  return;  }
 // Serial.println("Connected!"); 
  // codigo q sera enviado ao servidor TS
  String getStr = myWriteAPIKey;
  getStr +="&field1=";
  getStr += String(consumo_fornecimento);
  getStr += "\r\n\r\n";
   //Serial.println(getStr); 
  client.print("GET /update HTTP/1.1\n");
  client.print("Host: api.thingspeak.com\n");
  client.print("Connection: close\n");
  client.print("X-THINGSPEAKAPIKEY: "+myWriteAPIKey+"\n");
  client.print("Content-Type: application/x-www-form-urlencoded\n");
  client.print("Content-Length: ");
  client.print(getStr.length());
  client.print("\n\n");
  client.print(getStr);
   unsigned long timeout = millis();
  while (client.available() == 0) 
  {    if (millis() - timeout > 5000)     {
      Serial.println(">>> Client Timeout !");
      client.stop();   return;    }  } 
  // lendo e printando na serial todas as linhas do servidor
  while (client.available()) 
  {    String line = client.readStringUntil('\r');
   //Serial.print(line);  
   } 
 //Serial.println(); Serial.println("closing connection");
 client.stop();
 }
///////////////////////////////////////////////////
//tira media de tensao
int mediaTensao()
{
 int i;
 long int soma=0,media;// O valor para 12 bits(4095) é muito alto! Por isso estou usando long int
  for(i=0;i<60;i++)
  {
    soma+=analogRead(35);//modifique para a porta que for usar
  }
  media=soma/60;
  return media;
}
